{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adhik\\\\OneDrive\\\\Desktop\\\\React typing speed\\\\spideetype\\\\src\\\\components\\\\App\\\\App.jsx\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Nav from \"../Nav/Nav\";\nimport Landing from \"../Landing/Landing\";\nimport ChallangeSection from \"../ChallangeSection/ChallangeSection\";\nimport Footer from \"../Footer/Footer\";\nimport { SAMPLE_PARAGRAPHS } from './../../data/sampleParagraphs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TotalTime = 60;\nconst ServiceUrl = \"http://metaphorpsum.com/paragraphs/1/9\";\nconst DefaultState = {\n  selectedParagraph: \"\",\n  timerStarted: false,\n  timeRemaining: TotalTime,\n  words: 0,\n  characters: 0,\n  wpm: 0,\n  testInfo: []\n};\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = DefaultState;\n\n    this.fetchNewParagraphFallback = () => {\n      const data = SAMPLE_PARAGRAPHS[Math.floor(Math.random() * SAMPLE_PARAGRAPHS.length)];\n      const selectedParagraphArray = data.split(\"\");\n      const testInfo = selectedParagraphArray.map(SelectedLetter => {\n        return {\n          testLetter: SelectedLetter,\n          status: \"notAttempted\"\n        };\n      });\n      this.setState({ ...DefaultState,\n        testInfo,\n        selectedParagraph: data\n      });\n    };\n\n    this.fetchNewParagraph = () => {\n      fetch(ServiceUrl).then(response => response.text()).then(data => {\n        const selectedParagraphArray = data.split(\"\");\n        const testInfo = selectedParagraphArray.map(SelectedLetter => {\n          return {\n            testLetter: SelectedLetter,\n            status: \"notAttempted\"\n          };\n        });\n        this.setState({ ...DefaultState,\n          testInfo,\n          selectedParagraph: data\n        });\n      });\n    };\n\n    this.startTimer = () => {\n      this.setState({\n        timerStarted: true\n      });\n      const timer = setInterval(() => {\n        if (this.state.timeRemaining > 0) {\n          // Change the WPM \n          const timeSpent = TotalTime - this.state.timeRemaining;\n          const wpm = timeSpent > 0 ? this.state.words / timeSpent * TotalTime : 0;\n          this.setState({\n            timeRemaining: this.state.timeRemaining - 1,\n            wpm: parseInt(wpm)\n          });\n        } else {\n          clearInterval(timer);\n        }\n      }, 1000);\n    };\n\n    this.startAgain = () => this.fetchNewParagraphFallback();\n\n    this.handleUserInput = inputValue => {\n      if (!this.state.timerStarted) this.startTimer(); // Algorithms \n\n      const characters = inputValue.length;\n      const words = inputValue.split(\" \").length;\n      const index = characters - 1;\n\n      if (index < 0) {\n        this.setState({\n          testInfo: [{\n            testLetter: this.state.testInfo[0].testLetter,\n            status: \"notAttempted\"\n          }, ...this.state.testInfo.slice(1)],\n          characters,\n          words\n        });\n        return;\n      }\n\n      if (index >= this.state.selectedParagraph.length) {\n        this.setState({\n          characters,\n          words\n        });\n        return;\n      } // Make a copy of testInfo\n\n\n      const testInfo = this.state.testInfo;\n      if (!(index === this.state.selectedParagraph.length - 1)) testInfo[index + 1].status = \"notAttempted\"; // Check for the correct typed letter\n\n      const isCorrect = inputValue[index] === testInfo[index].testLetter; // Updated the testInfo \n\n      testInfo[index].status = isCorrect ? \"correct\" : \"incorrect\"; // Update the state\n\n      this.setState({\n        testInfo,\n        words,\n        characters\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchNewParagraphFallback();\n  }\n\n  render() {\n    console.log(\"Test info - \", this.state.testInfo);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Landing, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ChallangeSection, {\n        selectedParagraph: this.state.selectedParagraph,\n        words: this.state.words,\n        characters: this.state.characters,\n        wpm: this.state.wpm,\n        timeRemaining: this.state.timeRemaining,\n        timerStarted: this.state.timerStarted,\n        testInfo: this.state.testInfo,\n        onInputChange: this.handleUserInput,\n        startAgain: this.startAgain\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Nav","Landing","ChallangeSection","Footer","SAMPLE_PARAGRAPHS","TotalTime","ServiceUrl","DefaultState","selectedParagraph","timerStarted","timeRemaining","words","characters","wpm","testInfo","App","Component","state","fetchNewParagraphFallback","data","Math","floor","random","length","selectedParagraphArray","split","map","SelectedLetter","testLetter","status","setState","fetchNewParagraph","fetch","then","response","text","startTimer","timer","setInterval","timeSpent","parseInt","clearInterval","startAgain","handleUserInput","inputValue","index","slice","isCorrect","componentDidMount","render","console","log"],"sources":["C:/Users/adhik/OneDrive/Desktop/React typing speed/spideetype/src/components/App/App.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport Nav from \"../Nav/Nav\";\r\nimport Landing from \"../Landing/Landing\";\r\nimport ChallangeSection from \"../ChallangeSection/ChallangeSection\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport { SAMPLE_PARAGRAPHS } from './../../data/sampleParagraphs';\r\n\r\nconst TotalTime = 60;\r\nconst ServiceUrl = \"http://metaphorpsum.com/paragraphs/1/9\";\r\nconst DefaultState = {\r\n    selectedParagraph: \"\",\r\n    timerStarted: false,\r\n    timeRemaining: TotalTime,\r\n    words: 0,\r\n    characters: 0,\r\n    wpm: 0,\r\n    testInfo: [],\r\n};\r\n\r\n\r\nclass App extends React.Component {\r\n    state = DefaultState;\r\n\r\n    fetchNewParagraphFallback = () => {\r\n        const data = SAMPLE_PARAGRAPHS[\r\n            Math.floor(Math.random() * SAMPLE_PARAGRAPHS.length)\r\n        ];\r\n\r\n        const selectedParagraphArray = data.split(\"\");\r\n        const testInfo = selectedParagraphArray.map(SelectedLetter => {\r\n            return {\r\n                testLetter: SelectedLetter,\r\n                status: \"notAttempted\",\r\n            };\r\n        });\r\n\r\n        this.setState({\r\n            ...DefaultState,\r\n            testInfo,\r\n            selectedParagraph: data\r\n        });\r\n\r\n    }\r\n\r\n    fetchNewParagraph = () => {\r\n        fetch(ServiceUrl)\r\n            .then(response => response.text())\r\n            .then((data) => {\r\n\r\n                const selectedParagraphArray = data.split(\"\");\r\n                const testInfo = selectedParagraphArray.map(SelectedLetter => {\r\n                    return {\r\n                        testLetter: SelectedLetter,\r\n                        status: \"notAttempted\",\r\n                    };\r\n                });\r\n\r\n                this.setState({\r\n                    ...DefaultState,\r\n                    testInfo,\r\n                    selectedParagraph: data\r\n                });\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchNewParagraphFallback();\r\n    }\r\n\r\n    startTimer = () => {\r\n        this.setState({ timerStarted: true });\r\n        const timer = setInterval(() => {\r\n            if (this.state.timeRemaining > 0) {\r\n                // Change the WPM \r\n                const timeSpent = TotalTime - this.state.timeRemaining;\r\n                const wpm = timeSpent > 0\r\n                    ? (this.state.words / timeSpent) * TotalTime\r\n                    : 0;\r\n\r\n                this.setState({\r\n                    timeRemaining: this.state.timeRemaining - 1,\r\n                    wpm: parseInt(wpm),\r\n                })\r\n            } else {\r\n                clearInterval(timer);\r\n            }\r\n\r\n        }, 1000);\r\n    }\r\n\r\n    startAgain = () => this.fetchNewParagraphFallback();\r\n\r\n    handleUserInput = (inputValue) => {\r\n        if (!this.state.timerStarted) this.startTimer();\r\n\r\n        // Algorithms \r\n        const characters = inputValue.length;\r\n        const words = inputValue.split(\" \").length;\r\n        const index = characters - 1;\r\n\r\n        if (index < 0) {\r\n            this.setState({\r\n                testInfo: [\r\n                    {\r\n                        testLetter: this.state.testInfo[0].testLetter,\r\n                        status: \"notAttempted\"\r\n                    },\r\n                    ...this.state.testInfo.slice(1)\r\n                ],\r\n                characters,\r\n                words,\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if (index >= this.state.selectedParagraph.length) {\r\n            this.setState({ characters, words });\r\n            return;\r\n        }\r\n\r\n        // Make a copy of testInfo\r\n        const testInfo = this.state.testInfo;\r\n        if (!(index === this.state.selectedParagraph.length - 1))\r\n            testInfo[index + 1].status = \"notAttempted\";\r\n\r\n\r\n        // Check for the correct typed letter\r\n        const isCorrect = inputValue[index] === testInfo[index].testLetter;\r\n\r\n        // Updated the testInfo \r\n        testInfo[index].status = isCorrect ? \"correct\" : \"incorrect\";\r\n\r\n        // Update the state\r\n        this.setState({\r\n            testInfo,\r\n            words,\r\n            characters,\r\n        })\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        console.log(\"Test info - \", this.state.testInfo);\r\n        return (\r\n            <div className=\"app\">\r\n                <Nav />\r\n\r\n                <Landing />\r\n\r\n                <ChallangeSection\r\n                    selectedParagraph={this.state.selectedParagraph}\r\n                    words={this.state.words}\r\n                    characters={this.state.characters}\r\n                    wpm={this.state.wpm}\r\n                    timeRemaining={this.state.timeRemaining}\r\n                    timerStarted={this.state.timerStarted}\r\n                    testInfo={this.state.testInfo}\r\n                    onInputChange={this.handleUserInput}\r\n                    startAgain={this.startAgain}\r\n                />\r\n\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}